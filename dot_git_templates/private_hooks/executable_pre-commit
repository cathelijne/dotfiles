#!/bin/bash

gitemail() {
  # function make sure user.email exists before committing
  #
  #
  # If you're using more than one git provider, it's too easy to acidentally commit with the eamil address of
  # one to the other. Yes, you can --amend, but, well, ugh.
  #
  # One solution is to look at the remote url, and set the email address based on that. This works quite well,
  # but what if you have, for instamce, two github accounts?
  # In that case, group the repos in directories, and set the email address based on the directory.
  # Here's an example of how to do this:
  #
  # 1) check out your git projects in provider-specific directories. I have the following directories set up:
  #
  #    /home/cathelijne/work/gitrepos/--githubrepo
  #                                  |--gitlabrepo
  #                                  |--otherrepos
  #                                     |--bitbucketrepo
  #                                     |--weirdproviderrepo
  #                                  |--workspecific
  #                                     |--repo1
  #                                     |--repo2
  #
  # 2) (Mis-)use your git config to add per-provider email addresses to it:
  #
  #    "git config --global github.email my.github@email.address"
  #    "git config --global gitlab.email my.gitlab@email.address"
  #    "git config --global bitbucket.email my.bitbucket@email.address"
  #    "git config --global workspecific.email my.work@email.address"
  #
  # 3) Even though we're installing a pre-commit hook, git does its own pre-check, and does this BEFORE your
  #    hook fires. If you don't have a name and email adress set, it will complain, and your hook script won't
  #    even run. This means you will have to set a global name and email address:
  #
  #    "git config --global user.name My Name"
  #    "git config --global user.email SetMe"
  #
  #    I'm using a dummy email address. You could also use a real one. It's the last one checked, so you could
  #    use this as the (global) fallback option.
  #
  # 4) Copy this script to ~/.git-templates/hooks/pre-commit and chmod to 755
  #
  # 5) Tell git to always copy this hook to new projects by adding an init section to your ~/.gitconfig
  #
  #    [init]
  #        templatedir = ~/.git-templates
  #
  # That's it.
  # Caveat: The directory lookup part of the script doesn't check if your repo is actually inside a git tree.


  # If you have a repository-specific email address, use that:
  EMAIL=$(git config --local user.email)
  if [ $EMAIL ]; then
    echo "Found repository-specific email address $EMAIL. Good!"
    return
  fi

  # Use the directory tree. My workspecific repos are like that:
  EMAIL=$(git config --global $(basename $(dirname $(git rev-parse --show-toplevel))).email)
  if [ $EMAIL ]; then
      echo "Found an email address $EMAIL based on the directory tree. Good! Using it as our repo-specific email address"
      git config user.email $EMAIL
      return
  fi

  # My other repos are in disarray, so I'm using the remote url to set the email address:
  PROVIDER=$(git remote get-url --push origin |awk -F '\/\/|@' '{print $2}'|awk -F '\/|:' '{print $1}' | rev | cut -d "." -f 2 | rev)
  EMAIL=$(git config --global $PROVIDER.email)
  if [ $EMAIL ]; then
      echo "Found git-provider specific email address $EMAIL. Good! Using it as our repo-specific email address"
      git config user.email $EMAIL
      return
  fi

  # If all else fails, use the global email address
  EMAIL=$(git config --global user.email)
  if [ $EMAIL ]; then
      echo "Found a global email adress $EMAIL. You might want to check if that's what you want."
      echo "You can change the adress used with"
      echo '        git commit --amend --author="Author Name <email@address.com>"'
      return
  fi
}

gitemail
