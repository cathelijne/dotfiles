###############################################################################
#                                                                             #
# This file is managed by Chezmoi. Please edit with `chezmoi edit ~/.zshrc`   #
# OR                                                                          #
# `chezmoi edit --apply-template ~/.zshrc`                                    #
# OR                                                                          #
# directly in the git repo                                                    #
#                                                                             #
###############################################################################

# functions

# Change cluster and namespace. Although this is better handled by kubecm nowadays.
function ktx {
    kubectl config use-context $(kubectl config get-contexts -o name | fzf --select-1 --exit-0 --prompt "Select cluster: ") && kns
}

# Change namespace
function kns {
    kubectl config set-context $(kubectl config current-context) \
            --namespace=$((kubectl get namespaces -o name | sed 's-namespace/--') \
            | fzf -1 -0 --prompt "Select namespace: " --preview="kubectl get pods --namespace={}" --preview-window=down:40)
}

# Collect stats from nodes
function kstats {
  kubectl get nodes \
    | awk 'FNR > 1 {print $1}' \
    | xargs -I {} sh -c 'echo {} ; kubectl describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo '
}

# Connect to a Cisco Anyconnect vpn with fields retrieved from 1Password
# In 1Password create a new item with the following fields:
# - username
# - password
# - authgroup
# - server
# Call the function with the name of the 1Password item as argument

function oc {
  $(op item get hoekit --format json |jq -r '.fields[] |("export " + (.label|ascii_downcase) + "=" + .value)')
  echo "Touch your Yubikey:"
  read "PASSWORD2"
  sudo -p "sudo: " openconnect -u ${username} --authgroup=${authgroup} --form-entry "main:password=${password}" --form-entry "main:secondary_password=${PASSWORD2}" ${server}
}

# If your IT department sends a profile with the vpn connection,
# openconnect might be a bit too open. In that case, use the
# official anyconnect client. You have to start the daemon first:
# there are two options:
# - run with sudo from the command line (or use the acd function)
#   sudo /opt/cisco/anyconnect/bin/vpnagentd
# - enable vpnagentd as a startup item in your MacOS login items
#   there is more than one available item for anyconnect. Pick the
#   one that affects all users.

function acc {
  $(op item get $1 --format json |jq -r '.fields[] |("export " + (.label|ascii_downcase) + "=" + .value)')
  echo $password|pbcopy
  echo "================================================================="
  echo "=  Your group is $authgroup and your username is $username,"
  echo "=  after the first run, these will be prefilled in the form     ="
  echo "=  I have copied your password. You can paste it on the prompt  ="
  echo "=  For the second password, touch your yubikey                  ="
  echo "================================================================="
  /opt/cisco/anyconnect/bin/vpn -s connect $server
  echo ""|pbcopy
}

function acd {
  sudo /opt/cisco/anyconnect/bin/vpn disconnect
}

# Fix mdfind output
function mdfind() {
  /usr/bin/mdfind $@ 2> >(grep --invert-match ' \[UserQueryParser\] ' >&2)
}

function bwu() {
  export BW_SESSION=$(bw unlock --raw)
}

function javacerts {
  echo $JAVA_HOME
  keytool \
    -importkeystore \
    -srckeystore ~/.local/share/java/cacerts \
    -srcstorepass changeit \
    --deststorepass changeit \
    -destkeystore $JAVA_HOME/lib/security/cacerts \
    -noprompt
}

# Github Copilot

ghcs() {
	FUNCNAME="$funcstack[1]"
	TARGET="shell"
	local GH_DEBUG="$GH_DEBUG"
	local GH_HOST="$GH_HOST"

	read -r -d '' __USAGE <<-EOF
	Wrapper around \`gh copilot suggest\` to suggest a command based on a natural language description of the desired output effort.
	Supports executing suggested commands if applicable.

	USAGE
	  $FUNCNAME [flags] <prompt>

	FLAGS
	  -d, --debug           Enable debugging
	  -h, --help            Display help usage
	      --hostname        The GitHub host to use for authentication
	  -t, --target target   Target for suggestion; must be shell, gh, git
	                        default: "$TARGET"

	EXAMPLES

	- Guided experience
	  $ $FUNCNAME

	- Git use cases
	  $ $FUNCNAME -t git "Undo the most recent local commits"
	  $ $FUNCNAME -t git "Clean up local branches"
	  $ $FUNCNAME -t git "Setup LFS for images"

	- Working with the GitHub CLI in the terminal
	  $ $FUNCNAME -t gh "Create pull request"
	  $ $FUNCNAME -t gh "List pull requests waiting for my review"
	  $ $FUNCNAME -t gh "Summarize work I have done in issues and pull requests for promotion"

	- General use cases
	  $ $FUNCNAME "Kill processes holding onto deleted files"
	  $ $FUNCNAME "Test whether there are SSL/TLS issues with github.com"
	  $ $FUNCNAME "Convert SVG to PNG and resize"
	  $ $FUNCNAME "Convert MOV to animated PNG"
	EOF

	local OPT OPTARG OPTIND
	while getopts "dht:-:" OPT; do
		if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
			OPT="${OPTARG%%=*}"       # extract long option name
			OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
			OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
		fi

		case "$OPT" in
			debug | d)
				GH_DEBUG=api
				;;

			help | h)
				echo "$__USAGE"
				return 0
				;;

			hostname)
				GH_HOST="$OPTARG"
				;;

			target | t)
				TARGET="$OPTARG"
				;;
		esac
	done

	# shift so that $@, $1, etc. refer to the non-option arguments
	shift "$((OPTIND-1))"

	TMPFILE="$(mktemp -t gh-copilotXXXXXX)"
	trap 'rm -f "$TMPFILE"' EXIT
	if GH_DEBUG="$GH_DEBUG" GH_HOST="$GH_HOST" gh copilot suggest -t "$TARGET" "$@" --shell-out "$TMPFILE"; then
		if [ -s "$TMPFILE" ]; then
			FIXED_CMD="$(cat $TMPFILE)"
			print -s "$FIXED_CMD"
			echo
			eval "$FIXED_CMD"
		fi
	else
		return 1
	fi
}

ghce() {
	FUNCNAME="$funcstack[1]"
	local GH_DEBUG="$GH_DEBUG"
	local GH_HOST="$GH_HOST"

	read -r -d '' __USAGE <<-EOF
	Wrapper around \`gh copilot explain\` to explain a given input command in natural language.

	USAGE
	  $FUNCNAME [flags] <command>

	FLAGS
	  -d, --debug      Enable debugging
	  -h, --help       Display help usage
	      --hostname   The GitHub host to use for authentication

	EXAMPLES

	# View disk usage, sorted by size
	$ $FUNCNAME 'du -sh | sort -h'

	# View git repository history as text graphical representation
	$ $FUNCNAME 'git log --oneline --graph --decorate --all'

	# Remove binary objects larger than 50 megabytes from git history
	$ $FUNCNAME 'bfg --strip-blobs-bigger-than 50M'
	EOF

	local OPT OPTARG OPTIND
	while getopts "dh-:" OPT; do
		if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
			OPT="${OPTARG%%=*}"       # extract long option name
			OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
			OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
		fi

		case "$OPT" in
			debug | d)
				GH_DEBUG=api
				;;

			help | h)
				echo "$__USAGE"
				return 0
				;;

			hostname)
				GH_HOST="$OPTARG"
				;;
		esac
	done

	# shift so that $@, $1, etc. refer to the non-option arguments
	shift "$((OPTIND-1))"

	GH_DEBUG="$GH_DEBUG" GH_HOST="$GH_HOST" gh copilot explain "$@"
}

curl_time() {
    curl -so /dev/null -w "\
   namelookup:  %{time_namelookup}s\n\
      connect:  %{time_connect}s\n\
   appconnect:  %{time_appconnect}s\n\
  pretransfer:  %{time_pretransfer}s\n\
     redirect:  %{time_redirect}s\n\
starttransfer:  %{time_starttransfer}s\n\
-------------------------\n\
        total:  %{time_total}s\n" "$@"
}
